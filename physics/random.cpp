// https://en.cppreference.com/w/cpp/named_req/RandomNumberDistribution
#include <random>

#include "random.hpp"

using namespace GYDM;

/*************************************************************************************************/
// Members in <random> override the operator '()' to generate value

// non-determinstic generator
static std::random_device rd;

// to seed mersenne twister, similar to srand() with datum better than time(nullptr);
static std::mt19937 random_generator(rd());

/*************************************************************************************************/
int GYDM::random_raw() {
    return random_generator();
}

int GYDM::random_uniform(int min, int max) {
    // shape data generated by a generator with a distribution for integers in [min, max] 
    std::uniform_int_distribution<> random_dist(min, max);

    return random_dist(random_generator);
}

unsigned int GYDM::random_uniform(unsigned int min, unsigned int max) {
    // shape data generated by a generator with a distribution for integers in [min, max] 
    std::uniform_int_distribution<unsigned int> random_dist(min, max);

    return random_dist(random_generator);
}

float GYDM::random_uniform(float min, float max) {
    std::uniform_real_distribution<float> random_dist(min, max);

    return random_dist(random_generator);
}

double GYDM::random_uniform(double min, double max) {
    std::uniform_real_distribution<double> random_dist(min, max);

    return random_dist(random_generator);
}

bool GYDM::random_bernoulli(double p) {
    std::bernoulli_distribution random_dist(p);

    return random_dist(random_generator);
}
